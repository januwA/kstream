/// <reference types="node" />
declare type int8 = number;
declare type uint8 = number;
declare type int16 = number;
declare type uint16 = number;
declare type int32 = number;
declare type uint32 = number;
declare type int64 = bigint;
declare type uint64 = bigint;
declare type float = number;
declare type double = number;
export declare class kstream {
    v: DataView;
    private pos_;
    littleEndian: boolean;
    textDecoder: TextDecoder;
    textEncoder: TextEncoder;
    offset: number;
    get pos(): number;
    set pos(value: number);
    private constructor();
    static create(filepath: string, pos?: number, littleEndian?: boolean): kstream;
    static create(nodeBuf: Buffer, pos?: number, littleEndian?: boolean): kstream;
    static create(uint8arr: Uint8Array, pos?: number, littleEndian?: boolean): kstream;
    static create(v: DataView, pos?: number, littleEndian?: boolean): kstream;
    private _pos;
    back(): void;
    eof(): boolean;
    get i8(): int8;
    set i8(value: int8);
    get u8(): uint8;
    set u8(value: uint8);
    get i16(): int16;
    set i16(value: int16);
    get u16(): uint16;
    set u16(value: uint16);
    get i32(): int32;
    set i32(value: int32);
    get u32(): uint32;
    set u32(value: uint32);
    get i64(): int64;
    set i64(value: int64);
    get u64(): uint64;
    set u64(value: uint64);
    get float(): float;
    set float(value: float);
    get double(): double;
    set double(value: double);
    readString(len?: number): string;
    writeString(str: string): void;
    copy(count: number): Uint8Array;
    insert(bytes: Uint8Array): void;
    insert(bytes: DataView): void;
    set(c: uint8, count: number): void;
    replace(buf: DataView): void;
    replace(buf: Uint8Array): void;
    cmp(buf2: Uint8Array, count: number, buf2Offset?: number): boolean;
    cmp(buf2: DataView, count: number, buf2Offset?: number): boolean;
    icmp(buf2: Uint8Array, count: number, buf2Offset?: number): boolean;
    icmp(buf2: DataView, count: number, buf2Offset?: number): boolean;
    pi8(offset?: number): int8;
    pu8(offset?: number): uint8;
    pi16(offset?: number): int16;
    pu16(offset?: number): void;
    pi32(offset?: number): int32;
    pu32(offset?: number): uint32;
    pi64(offset?: number): int64;
    pu64(offset?: number): uint64;
    pstring(len?: number): string;
}
export {};
//# sourceMappingURL=kstream.d.ts.map